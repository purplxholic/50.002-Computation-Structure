module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
 
  sig rst;                  // reset signal
  sig result[8];
  adder add;
  comparer cmp;
  shifter shift;
  boolean boole;
  multiply mult;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst) {
      tester tst;
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    
////////////////////////////      TEST MODE      ////////////////////////////
/////////////////////////////////////////////////////////////////////////////
    
    if (io_dip[2][7]) {     // when switch 23 is on, add/cmp/shift/boole modules will take inputs from tst module
      // adder module inputs
      add.a = tst.a;
      add.b = tst.b;
      add.alufn0 = tst.alufn[0];
      
      // compare module inputs
      cmp.z = add.z;
      cmp.v = add.v;
      cmp.n = add.n;
      cmp.alufn1 = tst.alufn[1];
      cmp.alufn2 = tst.alufn[2];
     
      // shifter module inputs
      shift.a = tst.a;
      shift.b = tst.b;
      shift.alufn = tst.alufn[1:0];
      
      // boolearn module inputs
      boole.a = tst.a;
      boole.b = tst.b;
      boole.alufn = tst.alufn[3:0];
      
      // multiply module inputs (not done)
      mult.a = tst.a;
      mult.b = tst.b;
      mult.alufn1 = tst.alufn[1];
      
      result = 8b0;
      case(tst.alufn[5:4]) {
        b00: result = add.op;
        b01: result = boole.op;
        b10: result = shift.op;
        b11: result = cmp.op;
      }
      
      io_led[0] = result;
      io_led[1] = tst.exp;
      io_led[2] = tst.alufn;
      io_led[2][7] = (tst.exp == result);
    }
    
////////////////////////////      ALU MODE      /////////////////////////////
/////////////////////////////////////////////////////////////////////////////
      
    else {            // when switch 23 is off, add/cmp/shift/boole modules will take inputs from io_dip switches
      // adder module inputs
      add.a = io_dip[1];
      add.b = io_dip[0];
      add.alufn0 = io_dip[2][0];
      
      // compare module inputs
      cmp.z = add.z;
      cmp.v = add.v;
      cmp.n = add.n;
      cmp.alufn1 = io_dip[2][1];
      cmp.alufn2 = io_dip[2][2];
     
      // shifter module inputs
      shift.a = io_dip[1];
      shift.b = io_dip[0];
      shift.alufn = io_dip[2][1:0];
      
      // boolearn module inputs
      boole.a = io_dip[1];
      boole.b = io_dip[0];
      boole.alufn = io_dip[2][3:0];
      
      //multiply module inputs
      mult.a = io_dip[1];
      mult.b = io_dip[0];
      mult.alufn1 = io_dip[2][1];
      case(io_dip[2][6:4]) {
      b000: io_led[0] = add.op;
      b001: io_led[0] = boole.op;
      b010: io_led[0] = shift.op;
      b011: io_led[0] = cmp.op;
      b100: io_led[0] = mult.op;
    }
  }
}
}