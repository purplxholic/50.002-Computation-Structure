module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    //input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    //input spi_ss,           // AVR SPI Slave Select
    //input spi_mosi,         // AVR SPI MOSI
    //input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    //input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    //input avr_rx_busy,       // AVR RX buffer full
    input movebtn[6],
    input startbtn,
    output io_led[3][8],
    output cube_level[4],
    output cube_col[4][4]
    // output io_seg[8],
    // output io_sel[4]
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){
      dff level[4];
      dff current[3][2];
      ext_io buttons;
      cube cube;
      fsm sm(#INIT(CHOOSE_LVL))={CHOOSE_LVL,INIT_MAP,MOVE,CHECK,GAME_OVER};
    }
  }
  // seven_seg a;
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8b0;    // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    buttons.movebtn = ~movebtn;
    buttons.start = ~startbtn;
    
    io_led = 3x{{8b0}};
    io_led[2] = level.q;
    // a.char = level.q[3:0];
    // io_seg = ~a.segs;
    // io_sel = ~4h1;
    
    cube.matrix = 4x{{4x{{4b0}}}};
    cube.curr = current.q;
    cube_col = cube.col;
    cube_level = cube.level;
    
    // STATE MACHINE PART //
    sm.d = sm.q; // if not specified, state remains the same
    case(sm.q) {
      sm.CHOOSE_LVL:
      // up/down -> increase/decrease level
      // start -> INIT_MAP
        led[0] = 1b1;
        led[7:4] = level.q;
        if (buttons.movebtn_pressed[0]) {level.d = level.q+1;}
        if (buttons.movebtn_pressed[1]) {level.d = level.q-1;}
        if (buttons.startpressed) {sm.d=sm.INIT_MAP;}
      sm.INIT_MAP:
      // get level map from ROM(?) and output to cube
      // up/down/left/right/fw/bw -> CHECK
      // reset -> CHOOSE_LVL
        led[1] = 1b1;
        if (buttons.startpressed) {sm.d=sm.MOVE;}
      sm.MOVE:
      // get level map from register(?) and output to cube
      // up/down/left/right/fw/bw -> CHECK
      // reset -> CHOOSE_LVL
        led[2] = 1b1;
        if (buttons.movebtn_pressed[0]) {current.d[0] = current.q[0]+1;}
        if (buttons.movebtn_pressed[1]) {current.d[0] = current.q[0]-1;}
        if (buttons.movebtn_pressed[2]) {current.d[1] = current.q[1]+1;}
        if (buttons.movebtn_pressed[3]) {current.d[1] = current.q[1]-1;}
        if (buttons.movebtn_pressed[4]) {current.d[2] = current.q[2]+1;}
        if (buttons.movebtn_pressed[5]) {current.d[2] = current.q[2]-1;}
        if (buttons.startpressed) {sm.d=sm.CHECK;}
      sm.CHECK:
      // check whether move is valid
      // if invalid -> MOVE (without changing map)
      // if valid, change map and check win/lose conditions (ALU)
      // if win/lose -> WIN/LOSE
      // else -> MOVE
        led[3] = 1b1;
        if (buttons.startpressed) {sm.d=sm.CHOOSE_LVL;}
      sm.GAME_OVER:
      // show YAY/BOO on 7-segment(?)
      // start/reset -> CHOOSE_LVL
        led[4] = 1b1;
        if (buttons.startpressed) {sm.d=sm.CHOOSE_LVL;}
    }
  }
}