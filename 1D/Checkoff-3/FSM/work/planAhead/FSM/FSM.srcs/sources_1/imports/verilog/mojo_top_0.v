/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    output reg spi_miso,
    output reg [3:0] spi_channel,
    output reg avr_rx,
    input [5:0] movebtn,
    input startbtn,
    output reg [3:0] cube_level,
    output reg [15:0] cube_col,
    output reg [6:0] segment_part,
    output reg [3:0] segment_LED
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [3:0] M_level_d, M_level_q = 1'h0;
  reg [5:0] M_current_d, M_current_q = 1'h0;
  wire [6-1:0] M_buttons_movebtn_pressed;
  wire [1-1:0] M_buttons_startpressed;
  reg [6-1:0] M_buttons_movebtn;
  reg [1-1:0] M_buttons_start;
  ext_io_2 buttons (
    .clk(clk),
    .rst(rst),
    .movebtn(M_buttons_movebtn),
    .start(M_buttons_start),
    .movebtn_pressed(M_buttons_movebtn_pressed),
    .startpressed(M_buttons_startpressed)
  );
  wire [4-1:0] M_cube_level;
  wire [16-1:0] M_cube_col;
  reg [64-1:0] M_cube_matrix;
  reg [6-1:0] M_cube_curr;
  cube_3 cube (
    .clk(clk),
    .rst(rst),
    .matrix(M_cube_matrix),
    .curr(M_cube_curr),
    .level(M_cube_level),
    .col(M_cube_col)
  );
  wire [7-1:0] M_displaySegments_segs;
  wire [4-1:0] M_displaySegments_segmentLED;
  reg [3-1:0] M_displaySegments_state;
  reg [4-1:0] M_displaySegments_score;
  reg [4-1:0] M_displaySegments_level;
  seven_seg_4 displaySegments (
    .clk(clk),
    .rst(rst),
    .state(M_displaySegments_state),
    .score(M_displaySegments_score),
    .level(M_displaySegments_level),
    .segs(M_displaySegments_segs),
    .segmentLED(M_displaySegments_segmentLED)
  );
  localparam CHOOSE_LVL_sm = 3'd0;
  localparam INIT_MAP_sm = 3'd1;
  localparam MOVE_sm = 3'd2;
  localparam CHECK_sm = 3'd3;
  localparam GAME_OVER_sm = 3'd4;
  
  reg [2:0] M_sm_d, M_sm_q = CHOOSE_LVL_sm;
  
  always @* begin
    M_sm_d = M_sm_q;
    M_level_d = M_level_q;
    M_current_d = M_current_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_buttons_movebtn = ~movebtn;
    M_buttons_start = ~startbtn;
    M_cube_matrix = 64'h0000000000000000;
    M_cube_curr = M_current_q;
    cube_col = M_cube_col;
    cube_level = M_cube_level;
    M_displaySegments_state = 3'h4;
    M_displaySegments_score = 4'ha;
    M_displaySegments_level = 2'h2;
    segment_LED = M_displaySegments_segmentLED;
    segment_part = M_displaySegments_segs;
    M_sm_d = M_sm_q;
    
    case (M_sm_q)
      CHOOSE_LVL_sm: begin
        led[0+0-:1] = 1'h1;
        led[4+3-:4] = M_level_q;
        if (M_buttons_movebtn_pressed[0+0-:1]) begin
          M_level_d = M_level_q + 1'h1;
        end
        if (M_buttons_movebtn_pressed[1+0-:1]) begin
          M_level_d = M_level_q - 1'h1;
        end
        if (M_buttons_startpressed) begin
          M_sm_d = INIT_MAP_sm;
        end
      end
      INIT_MAP_sm: begin
        led[1+0-:1] = 1'h1;
        if (M_buttons_startpressed) begin
          M_sm_d = MOVE_sm;
        end
      end
      MOVE_sm: begin
        led[2+0-:1] = 1'h1;
        if (M_buttons_movebtn_pressed[0+0-:1]) begin
          M_current_d[0+1-:2] = M_current_q[0+1-:2] + 1'h1;
        end
        if (M_buttons_movebtn_pressed[1+0-:1]) begin
          M_current_d[0+1-:2] = M_current_q[0+1-:2] - 1'h1;
        end
        if (M_buttons_movebtn_pressed[2+0-:1]) begin
          M_current_d[2+1-:2] = M_current_q[2+1-:2] + 1'h1;
        end
        if (M_buttons_movebtn_pressed[3+0-:1]) begin
          M_current_d[2+1-:2] = M_current_q[2+1-:2] - 1'h1;
        end
        if (M_buttons_movebtn_pressed[4+0-:1]) begin
          M_current_d[4+1-:2] = M_current_q[4+1-:2] + 1'h1;
        end
        if (M_buttons_movebtn_pressed[5+0-:1]) begin
          M_current_d[4+1-:2] = M_current_q[4+1-:2] - 1'h1;
        end
        if (M_buttons_startpressed) begin
          M_sm_d = CHECK_sm;
        end
      end
      CHECK_sm: begin
        led[3+0-:1] = 1'h1;
        if (M_buttons_startpressed) begin
          M_sm_d = CHOOSE_LVL_sm;
        end
      end
      GAME_OVER_sm: begin
        led[4+0-:1] = 1'h1;
        if (M_buttons_startpressed) begin
          M_sm_d = CHOOSE_LVL_sm;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_level_q <= 1'h0;
      M_current_q <= 1'h0;
      M_sm_q <= 1'h0;
    end else begin
      M_level_q <= M_level_d;
      M_current_q <= M_current_d;
      M_sm_q <= M_sm_d;
    end
  end
  
endmodule
