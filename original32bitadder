.include "C:/Users/The Gt Zan/Documents/jsim/50002/nominal.jsim"
.include "C:/Users/The Gt Zan/Documents/jsim/50002/stdcell.jsim"
.include "C:/Users/The Gt Zan/Documents/jsim/50002/checkoff2d/2dcheckoff_6ns.jsim"

.subckt XORr a b c
XXOR0 a b 1 nand2
XXOR1 a 1 3 nand2
XXOR2 b 1 2 nand2
XXOR3 2 3 4 nand2 
.ends


*possible to iron out more
.subckt ANDd a b c 
XAND0 a b 1 nand2
XAND1 1 1 c nand2
.ends 

.subckt ORr a b c 
XOR0 a a 1 nand2
XOR1 b b 2 nand2
XOR2 1 2 nand2
.ends

.subckt FA a b ci s finalp finalg

*replace Xxor1 a b 1 xor2
Xnand10 a b 4 XORr
*replace Xxor2 1 ci s xor2
Xnand20 4 ci 5 XORr
Xnand30 5 1 co nand2
.ends

*https://www.researchgate.net/figure/281624258_fig6_Figure-7-The-8-bit-Kogge-Stone-adder-and-its-basic-blocks-a-block-diagram-b-red
*for kogge-stone subckts 
.subckt RED a b P G 
Xgivep a b P XORr
Xgiveg a b G ANDd 
.ends

.subckt YELLOW Pi Gi Pp Gp P G 
Xgivep Pi Pp P ANDd
Xgiveg1 Pi Gp 1 ANDd
Xgiveg2 1 Gi G ORr
.ends

.subckt GREEN Pi Gi 
.connect Pi P 
.connect Gi G
.ends

*32-bit
.subckt adder32 op0 A[31:0] B[31:0] s[31:0] z v n 

Xnor B[31:0] op0#32 XB[31:0] XORr

*replace xor 
*Xnandor1 B[31:0] op0#32 btn1[31:0] nand2
*Xnandor2 B[31:0] btn1[31:0]  btn2[31:0]  nand2
*Xnandor3 op0#32 btn1[31:0]  btn3[31:0]  nand2
*Xnandor4 btn2[31:0]  btn3[31:0] XB[31:0] nand2
*end of replacing 


*adder0 is for the overspill of bits 
*XB is the output of the xor gate
*Xadder0 A0 XB0 op0 s0 c0 FA
*ripple Xadderall A[31:1] XB[31:1] c[30:0] s[31:1] c[31:1] FA

*carry ahead kogge-stone adder 
XL0 A[31:0] B[31:0] P[31:0] G[31:0] RED



*for z
*to get true with 0 , use nor2 but standard cell does nt have 32 input nor. so break down using or 
Xor0 s[0:7] s[8:15] s[16:23] s[24:31] o[0:7] or4
Xor1 o[0:1] o[2:3] o[4:5] o[6:7] output[0:1] or4
Xor2 output0 output1 z nor2

*for v - according to the boolean equation 
X1 s31 out1 inverter 
X2 A31 out2 inverter 
X3 XB31 out3 inverter 
X4 out2 out3 s31 out4 and3
X5 A31 XB31 out1 out5 and3
X6 out4 out5 v or2
.connect n s31
.ends
