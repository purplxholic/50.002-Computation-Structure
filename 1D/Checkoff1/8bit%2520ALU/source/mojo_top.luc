module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
   
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){
    //for light 
  multi_seven_seg seg;
  }
  }
  adder add;
  comparer cmp;
  shifter shift;
  boolean boole;
  
  
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    //io_seg = 8hff;          // turn segments off
    //io_sel = 4hf;           // select no digits
    io_seg = ~seg.seg; //turn segments on
    io_sel= ~seg.sel;
    seg.values= {4h8,4h5,4h3,4h1};
    
    // adder module inputs
    add.a = io_dip[1];
    add.b = io_dip[0];
    add.alufn0 = io_dip[2][0];
    
    
    // compare module inputs
    cmp.z = add.z;
    cmp.v = add.v;
    cmp.n = add.n;
    cmp.alufn1 = io_dip[2][1];
    cmp.alufn2 = io_dip[2][2];
   
    // shifter module inputs
    shift.a = io_dip[1];
    shift.b = io_dip[0];
    shift.alufn = io_dip[2][1:0];
    
    // boolearn module inputs
    boole.a = io_dip[1];
    boole.b = io_dip[0];
    boole.alufn = io_dip[2][3:0];
    
    case(io_dip[2][5:4]) {
      b00: io_led[0] = add.op;
      b01: io_led[0] = boole.op;
      b10: io_led[0] = shift.op;
      b11: io_led[0] = cmp.op;
    }
    
  }
}