.include "C:/Users/The Gt Zan/Documents/jsim/50002/nominal.jsim"
.include "C:/Users/The Gt Zan/Documents/jsim/50002/stdcell.jsim"
.include "C:/Users/The Gt Zan/Documents/jsim/50002/lab3checkoff_6.jsim"

.subckt FA a b ci s co
Xxor1 a b 1 xor2
Xxor2 1 ci s xor2
Xand11 b a 2 nand2
Xand12 2 2 3 nand2
Xand21 1 ci 4 nand2
Xand22 4 4 5 nand2
Xor11 3 5 6 nor2
Xor12 6 6 co nor2 
.ends

*32-bit
.subckt adder32 ALUFN0 a[31:0] b[31:0] s[31:0] z v n 
Xnor b[31:0] ALUFN0#32 XB[31:0] xor2
*adder0 is for the overspill of bits 
*XB is the output of the xor gate
Xadder0 a0 XB0 ALUFN0 s0 c0 FA
Xadderall a[31:1] XB[31:1] c[30:0] s[31:1] c[31:1] FA

*for z
*to get true with 0 , use nor2 but standard cell does nt have 32 input nor. so break down using or 
Xor0 s[0:7] s[8:15] s[16:23] s[24:31] o[0:7] or4
Xor1 o[0:1] o[2:3] o[4:5] o[6:7] output[0:1] or4
Xor2 output0 output1 z nor2

*for v - according to the boolean equation 
X1 s31 out1 inverter 
X2 a31 out2 inverter 
X3 XB31 out3 inverter 
X4 out2 out3 s31 out4 and3
X5 a31 XB31 out1 out5 and3
X6 out4 out5 v or2
.connect n s31
.ends

*comparable
.subckt compare32 ALUFN[2:1] z v n cmp[31:0]
Xcomp0 cmp[31:1] constant0
Xoor n v 2 xor2
Xor3 z 2 3 or2
Xid ALUFN[1] ALUFN[2] 0 z 2 3 cmp0 mux4
.ends

*mux 
.subckt boole32 ALUFN[3:0] A[31:0] B[31:0] boole[31:0]
Xmux A[31:0] B[31:0] ALUFN[0]#32 ALUFN[1]#32 ALUFN[2]#32 ALUFN[3]#32 boole[31:0] mux4
.ends

*shifter 
.subckt shift32 ALUFN[1:0] A[31:0] B[4:0] shift[31:0]
*to select SR or LR (31:0) 
Xshiftmux1 ALUFN0#32 A[31:0] A[0:31] firsto[31:0] mux2
*to select A31 for SRA or 0 for SR and SL 
Xshiftmux3 ALUFN1 0 A31 h mux2
Xfirst  B4#32 firsto[31:0] firsto[15:0] h#16  W[31:0] mux2
Xsecond B3#32 W[31:0] W[23:0] h#8 X[31:0] mux2
Xthird B2#32 X[31:0] X[27:0] h#4 Y[31:0] mux2
Xfourth B1#32 Y[31:0] Y[29:0] h#2 Z[31:0] mux2
Xfifth B0#32 Z[31:0] Z[30:0] h SL[31:0] mux2
*select again to reverse or not for SR and SL 
Xshiftmux2 ALUFN0#32 SL[31:0] SL[0:31] shift[31:0] mux2
.ends

*ALU
.subckt alu ALUFN[5:0] A[31:0] B[31:0] alu[31:0] z v n
Xadd ALUFN0 A[31:0] B[31:0] o1[31:0] z v n  adder32
Xboole ALUFN[3:0] A[31:0] B[31:0] o2[31:0] boole32
Xshift ALUFN[1:0] A[31:0] B[4:0]  o3[31:0] shift32
Xcmp ALUFN[2:1] z v n o4[31:0] compare32
XMUX ALUFN[4]#32 ALUFN[5]#32 o1[31:0] o2[31:0] o3[31:0] o4[31:0] alu[31:0] mux4
.ends 