.include "./50002/nominal.jsim"
.include "./50002/stdcell.jsim"
.include "./50002/checkoff2d/2dcheckoff_3ns.jsim"

*buffer in place helps to increase the t rise and t fall 

.subckt XORr a b c
*Tpd: 0.03ns * 3 = 0.09ns
XXOR0 a b 1 nand2
XXOR1 a 1 3 nand2
XXOR2 b 1 2 nand2
XXOR3 2 3 c nand2
.ends

*possible to iron out more
*tpd = 0.03 + 0.02 = 0.05ns 
.subckt ANDd a b c
XAND0 a b 1 nand2
XAND1 1 c inverter
.ends


.subckt ORr a b c 
*tpd = 0.03 * 2 = 0.06
XOR0 a a 1 nand2
XOR1 b b 2 nand2
XOR2 1 2 c nand2
.ends


*https://www.researchgate.net/figure/281624258_fig6_Figure-7-The-8-bit-Kogge-Stone-adder-and-its-basic-blocks-a-block-diagram-b-red
*for kogge-stone subckts
.subckt RED a b P G
*tpd = XORr tpd = 0.09 
Xgivep a b P XORr
Xgiveg a b G ANDd 
.ends


.subckt YELLOW Pi Gi Pp Gp P G
*tpd 0.05 + 0.06 = 0.11ns
Xinvert Gi invG inverter
Xinvert1 Pp invP inverter
Xgivep Pi invP Pwait nor2
Xinvert4 Pwait P inverter
Xgiveg1 Pi Gp 1 ORr
Xgiveg2 1 invG Gwait nand2
Xinvert2 Gwait G inverter
.ends

.subckt BLACK C P G tosum
*tpd = 0.03 + 0.02 + 0.03 = 0.08ns
Xblack1 C P 1 nand2
Xblack2 G invG inverter
Xblack3 invG 1 tosum nand2
.ends


*32-bit
.subckt adder32 op0 A[31:0] B[31:0] S[31:0] z v n
*need to connect because op0 IS ci from the original circuit
Xbuff1 op0 ci buffer
XinviB B[31:0] invB[31:0] inverter
Xinput op0#32  B[31:0] invB[31:0] XB[31:0] mux2

*select add or minus 
*REMEMBER TO USE THE NEW ONE XB NOT B
*Xnor B[31:0] op0#32 XB[31:0] XORr
*http://venividiwiki.ee.virginia.edu/mediawiki/index.php/File:8-bit_KSA.jpg

*carry ahead kogge-stone adder
*32 bits
XLevel1 A[31:0] XB[31:0] P[31:0] G[31:0] RED

XLevel1sum ci P0 stemp0 XORr
Xbufferlevel1 stemp0 S0 buffer

*31 bits of YELLOW 
XLevel2black ci P0 G0 tosum1 BLACK

XLevel2 P[31:1] G[31:1] P[30:0] G[30:0] plevelA[30:0] glevelA[30:0] YELLOW
XLevel2sum1 P1 tosum1 stemp1 XORr
XLevel2buffer1 stemp1 S1 buffer

*has 2 black , 29 bits of new YELLOW, total of 31bits
XLevel3black1 ci plevelA0 glevelA0 tosum2 BLACK
XLevel3black2 tosum1 plevelA1 glevelA1 tosum3 BLACK
XLevel3sum2 P2 tosum2 stemp2 XORr 
XlLevel3buffer1 stemp2 S2 buffer
Xlevel3sum3 P3 tosum3 stemp3 XORr
Xlevel3buffer2 stemp3 S3 buffer
XLevel3first plevelA[30:2] glevelA[30:2] plevelA[28:0] glevelA[28:0] plevelB[28:0] glevelB[28:0] YELLOW


*has 4 black , 25 bits of YELLOW, total 29 bits
Xlevel4black ci plevelB0 glevelB0 tosum4 BLACK
Xlevel4blackothers tosum[3:1] plevelB[3:1] glevelB[3:1] tosum[7:5] BLACK
Xlevel4sumtothers P[7:4] tosum[7:4] stemp[7:4] XORr
Xlevel4buffer1 stemp[7:4] S[7:4] buffer
Xlevel4 plevelB[28:4] glevelB[28:4] plevelB[24:0] glevelB[24:0] plevelC[24:0] glevelC[24:0] YELLOW


*has 8 black / 17 bits of YELLOW
Xlevel5black ci plevelC0 glevelC0 tosum8 BLACK
Xleve5otherblack tosum[7:1] plevelC[7:1] glevelC[7:1] tosum[15:9] BLACK
Xlevel5sumothers P[15:8] tosum[15:8] stemp[15:8] XORr
Xlevel5buffer stemp[15:8] S[15:8] buffer
Xlevel5 plevelC[24:8] glevelC[24:8] plevelC[16:0] glevelC[16:0] plevelD[16:0] glevelD[16:0] YELLOW


*has 16 BLACK 1 bit because 16 becomes BLACK and 1 becomes YELLOW
Xlevel6black ci plevelD0 glevelD0 tosum16 BLACK
Xlevel6blackothers tosum[15:1] plevelD[15:1] glevelD[15:1] tosum[31:17] BLACK
Xlevel6sumothers P[31:16] tosum[31:16]  S31 ss[30:16] XORr
Xbuff ss[30:16] S[30:16] buffer

Xlevel6 glevelD0 plevelD16 1 ANDd
Xlevel61 1 glevelD16 2 ORr
Xlevel62 plevelD0 plevelD16 3 ANDd
Xlevel63 ci 3 4 ANDd
XSUPREMELEADER 4 2 co ORr 
Xbuffer6 co c0 buffer




*for z

*tpd = 0.08 + 0.12 +0.07 + 0.05 = 0.32ns 

Xzbuff S[31:0] stry[31:0] buffer
Xze1 stry[31:0] o[7:0] nor4
Xze2 o[7:4] 9 nand4
Xze3 o[3:0] 10 nand4
Xze4 9 10 z nor2

*tpd = 0
.connect n S[31]

*tpd = inv + nand3 + nand2 = 0.02 +0.05 + 0.03 = 0.10ns 
XinvA A[31] Axinv[31] inverter
XinvB XB[31] Bxinv[31] inverter
XinvS S[31] Sinv[31] inverter
Xv11 A[31] XB[31] Sinv[31] v11 nand3
Xv21 Axinv[31] Bxinv[31] S[31] v21 nand3
Xor3 v11 v21 v nand2

.ends


*there is slight delay at the further timings due to double flip flops hence the difference at around 280ns
